<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<META http-equiv="Content-Style-Type" content="text/css">
<LINK rel="stylesheet" href="../lib/css/prog-standard.css" type="text/css">
<script src="../lib/codeptfy/run_prettify.js"></script>
<LINK rel="stylesheet" href="../lib/codeptfy/codeptfy-prog-standard.css" type="text/css">
<title>課題rp6(レポート課題)</title>
</head>
<body bgcolor="white">
<h1>課題rp6(レポート課題)</h1>

<UL>
<LI>目的：クラス定義の「本来の」扱い方やありがたみについてプログラミングを通して体験すること
<LI>　　：もう少し複雑なクラスを定義する仕組みを見ながら，それぞれの仕組みを理解し，その仕組みの利害得失について考えてみること
<!--LI>　　：グラフィカルユーザインタフェース(GUI)に部品として使われるオブジェクトの扱いを通じて，オブジェクト指向プログラミングのありがたみと大変さを体験すること-->
</UL>

<H1>課題: 定義したクラスのインスタンスによる簡易DB</H1>


<H2>Step 0: サンプルを動かしてみる</H2>
<UL>
<LI>以下のリンクから，プログラムとデータをダウンロードしてください．
<ul>
  <li><a href="rp6.java">rp6.java</a>
  <li><a href="shizuokaPostalCode.csv">shizuokaPostalCode.csv</a> (郵便局Webページからのデータを加工)
</ul>
</UL>

<h2>Step 1: プログラムの修正</h2>

<h3>Step 1-1: フィールド変数の private 化</h3>
<ul>
<li>rp6.java における，フィールド変数の定義に private をつけ，適切にゲッタとセッタメソッドを使うように修正する．
</ul>

<h3>Step 1-2: コンストラクタの設定</h3>
<ul>
<li>MyAddress クラスと，PostalCode クラスに，コンストラクタを設定し，インスタンスの初期値代入を容易にできるようにすること．
</ul>

<h3>Step 1-3: toString() メソッドの設定</h3>
<ul>
<li>MyAddress クラスと，PostalCode クラスに，toString() メソッドを設定し，インスタンスの内容表示方法をスッキリとさせること．
</ul>

<h3>Step 1-4: 検索の実装</h3>
<ul>
<li>このままでは読み込んだ郵便番号と住所を画面に出すだけで，意味のないプログラムである．
<li>そこで，郵便番号を入力すると住所を返してくれるプログラムを作成せよ．以下のような動作を想定することとする．
<li>検索の方法は様々存在する．まずは線形探索（配列の先頭から，一つずつ一致するか見ていく方法）で実装してみよう．
<li>文字列が等しいかどうかの判定には，String型の比較用メソッド compareTo を使いましょう．dateCode[] に入っている PostalCode のインスタンスでは，code フィールドは隠蔽されているはずなので，ゲッタ getCode() を使う必要があります．
<li>(発展) 二分探索や，連想配列(ハッシュ) Java だと例えば HashMap ，あるいは B木を使って検索できるようにしてみよう．

<pre class="shell">
$ java rp4_24
postal code: <em>4328011</em>
4328011: 静岡県(しずおかけん) 浜松市中区(はままつしなかく) 城北(じょうほく)

postal code: <em>9691622</em>
not found

postal code: <em>-1</em>
exit!
$
</pre>

  <LI> ここまでで提出する人は，以下を提出すればよい
    <UL>
      <LI>提出するプログラム: ここで最後にコンパイルしたプログラム(Javaソースファイル)
      <LI>提出する実行結果: ここでコンパイルしたプログラムの実行結果
      <LI>検討・考察事項: 無理に考察はしなくていいので，どのあたりが難しかったか，感想を代わりにここへ．(発展:今回の課題から，オブジェクトを使ったプログラミングの利点と注意点を考察せよ．特に，利点がどこにあると思うか？うまく書けたら加点する．ただし，Wikipediaとかからコピペして知らん顔するのは厳禁．「わからない」の場合は感想として扱う(=それ自体で減点とはしない)ので，(点数は加点されないかもしれないが)素直にそう書いてみてもよい．)
    </UL>
  </UL>

</ul>

<h3>Step 1-5: (発展) もっと検索の実装</h3>
<ul>
<li>住所の一部を入れると，合致するものをすべて出力するようなプログラムを作成せよ．
<li>例えば以下の様なものを想定する．
<li>String 型の indexOf() メソッドを使うと，部分一致するか判定できる(マッチしたらマッチした部分の先頭からの文字数，マッチしなかったら -1 が戻ってくる)．

<pre class="shell">
$ java rp4_24
address: <em>城北</em>
4200805: 静岡県(しずおかけん) 静岡市葵区(しずおかしあおいく) 城北(じょうほく)
4328011: 静岡県(しずおかけん) 浜松市中区(はままつしなかく) 城北(じょうほく)
4180062: 静岡県(しずおかけん) 富士宮市(ふじのみやし) 城北町(じょうほくちょう)
4360059: 静岡県(しずおかけん) 掛川市(かけがわし) 城北(じょうほく)

address:<em>富士</em>
4200023: 静岡県(しずおかけん) 静岡市葵区(しずおかしあおいく) 富士見町(ふじみちょう)
4228026: 静岡県(しずおかけん) 静岡市駿河区(しずおかしするがく) 富士見台(ふじみだい)
4240941: 静岡県(しずおかけん) 静岡市清水区(しずおかししみずく) 富士見町(ふじみちょう)
4100034: 静岡県(しずおかけん) 沼津市(ぬまづし) 富士見町(ふじみちょう)
4110028: 静岡県(しずおかけん) 三島市(みしまし) 富士ビレッジ(ふじびれっじ)
              :
4180047: 静岡県(しずおかけん) 富士宮市(ふじのみやし) 青木(あおき)
              :
              :

address: <em>exit</em>
exit!
$
</pre>
  <LI> ここまでで提出する人は，以下を提出すればよい
    <UL>
      <LI>提出するプログラム: ここで最後にコンパイルしたプログラム(Javaソースファイル)
      <LI>提出する実行結果: ここでコンパイルしたプログラムの実行結果
      <LI>検討・考察事項: 無理に考察はしなくていいので，どのあたりが難しかったか，感想を代わりにここへ．(発展:今回の課題から，オブジェクトを使ったプログラミングの利点と注意点を考察せよ．特に，利点がどこにあると思うか？うまく書けたら加点する．ただし，Wikipediaとかからコピペして知らん顔するのは厳禁．「わからない」の場合は感想として扱う(=それ自体で減点とはしない)ので，(点数は加点されないかもしれないが)素直にそう書いてみてもよい．)
    </UL>
  </UL>

<p>

<p>
<H2>(発展)Step2: 簡単なモデリングに挑戦(お役所データ編)</H2>
<UL>
  <LI>Step2: (ノーヒント)お役所では，我々の住所や生年月日やその他いろいろな情報を，きっと大切に保管してくれているに違いない．現時点でみなさんの持てる知識を総動員し（Wikipedia等の力も借りながら），Step1のプログラムを拡張して，実際にお役所(市役所や国など，行政単位はお好みで選んでよい)が持っているような個人や世帯ごとの情報をまるごと格納できるようなプログラムになるように，必要なクラスを設計し，それらを表示できるように書き換えてみよ．<EM>ただし１つ条件がある．クラス数を３０以上とすることと，クラス階層が４以上の深さを持つこと．</EM>クラス階層や継承をうまく使えるように考えてみること．
  <LI>ここまでできるような人には，提出方法も自由．ただし，自分ががんばったことをうまくアピールできることと，巨大なファイルは添付しないことのみを条件とする．
  <LI>※悩んだあげく，うまくいかなかったような場合でも，努力の様子やそこで得たことなどがきちんと説明できていれば，加点の対象になることもある．自分では完璧と思えないものであっても，思い切って提出してみたほうが，いいことがあるかもしれない．
</UL>

<p>
<H2>(超発展)Step3: 簡単なモデリングに挑戦(続:お役所データ編)</H2>
<UL>
  <LI>Step3: (ノーヒント)Step2のモデル化もとに，Java言語の持つ `interface'という仕組みをうまく使って，そのモデル化を洗練してみよ．その際に，どの部分をどのように変更したか，その変更によってどのような「洗練(=改良)」がされたかを，自分の言葉で述べよ．(注:この課題に「正解」はないので，その「正しさ」を自身の言葉で丁寧に説明せよ．)
  <LI>なお，Step1の課題が時間内に提出できている場合には，この課題を少し遅れて追加で出しても提出期限面で減点とはしない．
  <LI>ここまでできるような人には，提出方法も自由．ただし，自分ががんばったことをうまくアピールできることと，巨大なファイルは添付しないことのみを条件とする．
  <LI>※悩んだあげく，うまくいかなかったような場合でも，努力の様子やそこで得たことなどがきちんと説明できていれば，加点の対象になることもある．自分では完璧と思えないものであっても，思い切って提出してみたほうが，いいことがあるかもしれない．
</UL>
<H2>(超発展++)Step4: 簡単なモデリングに挑戦(続:お役所データ編++)</H2>
<UL>
  <LI>ここまでが出来た人へのボーナス課題．現在，IPAという組織を中心に，国内の公共的なデータを民間に開放するための基盤作りとして，「<A HREF="http://goikiban.ipa.go.jp">共通語彙基盤</A>」というものが整備されつつある．この「コア語彙」という部分を見てみて，今回ここまでの課題を行った部分との(モデル化に関する考え方も含めた)相違点について，自分なりに考えてまとめてみよ． <BR><BR>
  オブジェクト指向プログラミングにおけるデータのモデル化と，こうしたところで行われているデータ(や語彙)のモデル化の方法とはどういうところが違うのか？なぜ違うのか？その違いがどういうことに影響を及ぼすのか？，という視点に立ってこれらを比較できると，オブジェクト指向プログラミングの外側の世界でのモデリングが見えやすくなるかもしれない．
</UL>


<FONT COLOR="white">これでは課題が足らないという人は，ぜひスタッフまで申し出て下さい．</FONT>

<hr>


<a href="../index.html">戻る</a>
</body>
</html>
j
